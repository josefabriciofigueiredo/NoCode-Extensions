package com.webapi;

import android.app.Activity;
import android.content.Context;
import com.google.appinventor.components.annotations.*;
import com.google.appinventor.components.common.ComponentCategory;
import com.google.appinventor.components.runtime.AndroidNonvisibleComponent;
import com.google.appinventor.components.runtime.ComponentContainer;
import com.google.appinventor.components.runtime.EventDispatcher;

import android.os.AsyncTask;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import android.net.Uri;
import java.util.UUID;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.net.MalformedURLException;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@DesignerComponent(
        version = 1,
        description = "",
        category = ComponentCategory.EXTENSION,
        nonVisible = true,
        iconName = "")

@SimpleObject(external = true)
//Libraries
@UsesLibraries(libraries = "")
//Permissions
@UsesPermissions(permissionNames = "")

public class WebAPI extends AndroidNonvisibleComponent {

    //Activity and Context
    private Context context;
    private Activity activity;

    public WebAPI(ComponentContainer container){
        super(container.$form());
        this.activity = container.$context();
        this.context = container.$context();
    }

    

    // ----- GET -----
    @SimpleFunction(description = "Realiza uma solicitacao GET para a API")
    public void Get(String apiUrl) {
        new AsyncTask<String, Void, Object>() {
            @Override
            protected Object doInBackground(String... params) {
                String apiUrl = params[0];

                try {
                    BufferedReader readerStream = new BufferedReader(new InputStreamReader(new URL(apiUrl).openStream()));
                    StringBuilder data = new StringBuilder();
                    String line;

                    while ((line = readerStream.readLine()) != null) {
                        data.append(line);
                    }
                    readerStream.close();

                    JSONArray jsonArray = new JSONArray(data.toString());

                    List<Object> resultList = new ArrayList<>();
                    for (int i = 0; i < jsonArray.length(); i++) {
                        JSONObject jsonObject = jsonArray.getJSONObject(i);

                        Map<String, Object> resultMap = new HashMap<>();
                        convertJsonToMap(jsonObject, resultMap);
                        resultList.add(resultMap);
                    }

                    return resultList;
                } catch (Exception e) {
                    e.printStackTrace();
                    return e.toString();
                }
            }

            @Override
            protected void onPostExecute(Object result) {
                GetData(result);
            }
        }.execute(apiUrl);
    }

    

    @SimpleEvent(description = "Evento disparado quando os dados da API são obtidos")
    public void GetData(Object data) {
        EventDispatcher.dispatchEvent(this, "GetData", data);
    }


    // ----- POST -----
    @SimpleFunction(description = "Realiza uma solicitacao POST para a API")
    public void Post(String apiUrl, String values) {
        new AsyncTask<String, Void, Object>() {
            @Override
            protected Object doInBackground(String... params) {
                String apiUrl = params[0].toString();
                String values = params[1].toString();

                apiUrl += '?' + values;

                try {
                    // Abrir conexão
                    HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();

                    // Cabeçalho
                    connection.setRequestMethod("POST");
                    connection.setRequestProperty("Content-Type", "application/json");

                    // Lê a resposta do servidor
                    BufferedReader readerStream = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    String inputLine;
                    StringBuffer data = new StringBuffer();
                    while ((inputLine = readerStream.readLine()) != null) {
                        data.append(inputLine);
                    }
                    readerStream.close();

                    JSONObject jsonObject = new JSONObject(data.toString());
                    Map<String, Object> resultMap = new HashMap<>();
                    convertJsonToMap(jsonObject, resultMap);

                    return resultMap;
                } catch (MalformedURLException e) {
                    return "A URL não é válida: " + e.getMessage();
                } catch (Exception e) {
                    return e.toString();
                }
            }

            @Override
            protected void onPostExecute(Object result) {
                PostData(result);
            }
        }.execute(apiUrl, values);
    }

    // ----- POST with IMAGE -----
    @SimpleFunction(description = "Realiza uma solicitacao POST para a API")
    public void PostWithImage(String apiUrl, String filePath, String varImageAPI, String values) {
        new AsyncTask<String, String, Object>() {
            @Override
            protected Object doInBackground(String... params) {
                String apiUrl = params[0];
                String imagePath = params[1];
                String varImage = params[2];
                String values = params[3];

                if (!values.equals("null")) {
                    apiUrl += '?' + values;
                }

                try {
                    // Delimitador único
                    String boundary = UUID.randomUUID().toString();

                    // Abrir conexão
                    HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();
                    
                    // Cabeçalho
                    connection.setRequestMethod("POST");
                    connection.setDoOutput(true);
                    connection.setDoInput(true);
                    connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

                    // Iniciar a gravação dos dados da solicitação
                    DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());

                    // Adicionar o parâmetro do nome do campo no formulário
                    outputStream.writeBytes("--" + boundary + "\r\n");
                    outputStream.writeBytes("Content-Disposition: form-data; name=\"" + varImage + "\";filename=\"" + imagePath + "\"" + "\r\n");
                    outputStream.writeBytes("\r\n");

                    // Lê o arquivo File
                    FileInputStream fileInputStream = new FileInputStream(new File(imagePath));
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = fileInputStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    outputStream.writeBytes("\r\n");

                    // Finalizar a configuração da solicitação
                    outputStream.writeBytes("--" + boundary + "--" + "\r\n");
                    outputStream.flush();
                    outputStream.close();
                    fileInputStream.close();

                    // Lê a resposta do servidor
                    int responseCode = connection.getResponseCode();
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        BufferedReader readerStream = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        StringBuilder data = new StringBuilder();
                        String line;

                        while ((line = readerStream.readLine()) != null) {
                            data.append(line);
                        }
                        readerStream.close();

                        JSONObject jsonObject = new JSONObject(data.toString());

                        Map<String, Object> resultMap = new HashMap<>();
                        convertJsonToMap(jsonObject, resultMap);

                        return resultMap;
                    } else {
                        return "Erro na resposta da API: " + responseCode;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    return e.toString();
                }
            }

            @Override
            protected void onPostExecute(Object result) {
                PostData(result);
            }
        }.execute(apiUrl, filePath, varImageAPI, values);
    }

    // ----- POST-DATA -----
    @SimpleEvent(description = "Evento disparado quando os dados da API são obtidos com sucesso")
    public void PostData(Object data) {
        EventDispatcher.dispatchEvent(this, "PostData", data);
    }


    // ----- PATCH -----
    @SimpleFunction(description = "Realiza uma solicitacao PATCH para a API")
    public void Patch(String apiUrl, int id, String values) {
        new AsyncTask<String, Void, Object>() {
            @Override
            protected Object doInBackground(String... params) {
                String apiUrl = params[0];
                int id = Integer.parseInt(params[1]);
                String values = params[2];

                try {
                    // Construir a URL com parâmetros de query
                    Uri.Builder builder = Uri.parse(apiUrl).buildUpon();
                    builder.appendPath(String.valueOf(id));
                    if (!values.equals("null")) {
                        builder.encodedQuery(values);
                    }
                    apiUrl = builder.build().toString();

                    // Abrir conexão
                    HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();

                    // Cabeçalho
                    connection.setRequestMethod("PATCH");
                    connection.setRequestProperty("Content-Type", "application/json");

                    // Lê a resposta do servidor
                    BufferedReader readerStream = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    String inputLine;
                    StringBuffer data = new StringBuffer();
                    while ((inputLine = readerStream.readLine()) != null) {
                        data.append(inputLine);
                    }
                    readerStream.close();
                    connection.disconnect();

                    JSONObject jsonObject = new JSONObject(data.toString());
                    Map<String, Object> resultMap = new HashMap<>();
                    convertJsonToMap(jsonObject, resultMap);

                    return resultMap;
                } catch (MalformedURLException e) {
                    return "A URL não é válida: " + e.getMessage();
                } catch (Exception e) {
                    return e.toString();
                }
            }

            @Override
            protected void onPostExecute(Object result) {
                PatchData(result);
            }
        }.execute(apiUrl, String.valueOf(id), values);
    }

    // ----- PATCH with IMAGE -----
    @SimpleFunction(description = "Realiza uma solicitacao PATCH para a API")
    public void PatchWithImage(String apiUrl, int id, String filePath, String varImageAPI, String values) {
        new AsyncTask<String, String, Object>() {
            @Override
            protected Object doInBackground(String... params) {
                String apiUrl = params[0];
                int id = Integer.parseInt(params[1]);
                String imagePath = params[2];
                String varImage = params[3];
                String values = params[4];

                try {
                    // Construir a URL com parâmetros de query
                    Uri.Builder builder = Uri.parse(apiUrl).buildUpon();
                    builder.appendPath(String.valueOf(id));
                    if (!values.equals("null")) {
                        builder.encodedQuery(values);
                    }
                    apiUrl = builder.build().toString();

                    // Delimitador único
                    String boundary = UUID.randomUUID().toString();

                    // Abrir conexão
                    HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();

                    // Cabeçalho
                    connection.setRequestMethod("PATCH");
                    connection.setDoOutput(true);
                    connection.setDoInput(true);
                    connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

                    // Iniciar a gravação dos dados da solicitação
                    DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());

                    // Adicionar o parâmetro do nome do campo no formulário
                    outputStream.writeBytes("--" + boundary + "\r\n");
                    outputStream.writeBytes("Content-Disposition: form-data; name=\"" + varImage + "\"; filename=\"" + new File(imagePath).getName() + "\"" + "\r\n");
                    outputStream.writeBytes("\r\n");

                    // Lê o arquivo File
                    FileInputStream fileInputStream = new FileInputStream(new File(imagePath));
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = fileInputStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    outputStream.writeBytes("\r\n");

                    // Finalizar a configuração da solicitação
                    outputStream.writeBytes("--" + boundary + "--" + "\r\n");
                    outputStream.flush();
                    outputStream.close();
                    fileInputStream.close();

                    // Lê a resposta do servidor
                    int responseCode = connection.getResponseCode();
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        BufferedReader readerStream = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        StringBuilder data = new StringBuilder();
                        String line;

                        while ((line = readerStream.readLine()) != null) {
                            data.append(line);
                        }
                        readerStream.close();

                        JSONObject jsonObject = new JSONObject(data.toString());

                        Map<String, Object> resultMap = new HashMap<>();
                        convertJsonToMap(jsonObject, resultMap);

                        return resultMap;
                    } else {
                        return "Erro na resposta da API: " + responseCode;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    return e.toString();
                }
            }

            @Override
            protected void onPostExecute(Object result) {
                PatchData(result);
            }
        }.execute(apiUrl, String.valueOf(id), filePath, varImageAPI, values);
    }

    // ----- PATCH-DATA -----
    @SimpleEvent(description = "Evento disparado quando os dados da API são obtidos com sucesso após uma solicitacao PATCH")
    public void PatchData(Object data) {
        EventDispatcher.dispatchEvent(this, "PatchData", data);
    }


    // ----- DELETE -----
    @SimpleFunction(description = "Realiza uma solicitacao DELETE para a API")
    public void Delete(String apiUrl, int id) {
        new AsyncTask<Object, Void, Object>() {
            @Override
            protected Object doInBackground(Object... params) {
                String apiUrl = params[0].toString();
                String id = params[1].toString();

                apiUrl += '/' + id;

                try {
                    // Abrir conexão
                    HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();
                    connection.setRequestMethod("DELETE");
                    
                    int responseCode = connection.getResponseCode();
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        // A solicitação foi bem-sucedida
                        return true;
                    } else {
                        // A solicitação falhou
                        return false;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    return null;
                }
            }

            @Override
            protected void onPostExecute(Object result) {
                DeleteData(result);
            }
        }.execute(apiUrl, id);
    }

    // ----- DELETE-DATA -----
    @SimpleEvent(description = "Evento disparado quando os dados da API são deletados")
    public void DeleteData(Object data) {
        EventDispatcher.dispatchEvent(this, "DeleteData", data);
    }

    public static void convertJsonToMap(JSONObject jsonObject, Map<String, Object> resultMap) {
        Iterator<?> keys = jsonObject.keySet().iterator();
    
        while (keys.hasNext()) {
            String key = (String) keys.next();
            Object value = jsonObject.get(key);

            if (value instanceof JSONObject) {
                Map<String, Object> nestedMap = new HashMap<>();
                convertJsonToMap((JSONObject) value, nestedMap);
                resultMap.put(key, nestedMap);
            } else if (value instanceof JSONArray) {
                List<Object> nestedList = new ArrayList<>();
                JSONArray jsonArray = (JSONArray) value;
                for (int i = 0; i < jsonArray.length(); i++) {
                    Object obj = jsonArray.get(i);
                    if (obj instanceof JSONObject) {
                        Map<String, Object> nestedMap = new HashMap<>();
                        convertJsonToMap((JSONObject) obj, nestedMap);
                        nestedList.add(nestedMap);
                    } else {
                         nestedList.add(obj);
                    }
                }
                resultMap.put(key, nestedList);
            } else {
                resultMap.put(key, value);
            }
        }
    }
}